(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{117:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/telegram-notifications-1c85b7c7194229b4ad6fcf68630b50fb.png"},75:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return p}));var a=t(2),o=t(6),r=(t(0),t(78)),i={id:"telegram-notifications",title:"Telegram Notifications",sidebar_label:"Telegram Notifications",hide_table_of_contents:!0,image:"/img/og-images/btcpay-telegram.png"},c={unversionedId:"integrations/telegram-notifications",id:"integrations/telegram-notifications",isDocsHomePage:!1,title:"Telegram Notifications",description:"This flow will send you notifications about paid invoices using a Telegram bot.",source:"@site/flows/integrations/telegram-notifications.md",slug:"/integrations/telegram-notifications",permalink:"/flows/integrations/telegram-notifications",editUrl:"https://github.com/redbtc/redbtc.org/edit/master/flows/integrations/telegram-notifications.md",version:"current",lastUpdatedBy:"Alex Kaul",lastUpdatedAt:1601477139,sidebar_label:"Telegram Notifications",sidebar:"flows",previous:{title:"Handling Instant Payment Notifications",permalink:"/flows/starters/ipn-handler"},next:{title:"Kraken Exchange",permalink:"/flows/integrations/kraken-exchange"}},l=[{value:"Prerequisites",id:"prerequisites",children:[]},{value:"Configuration &amp; Setup",id:"configuration--setup",children:[]},{value:"Node-RED Flow",id:"node-red-flow",children:[]}],s={rightToc:l};function p(e){var n=e.components,i=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},s,i,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,"This flow will send you notifications about paid invoices using a Telegram bot."),Object(r.b)("p",null,Object(r.b)("img",{alt:"Telegram Notifications Flow",src:t(117).default})),Object(r.b)("h2",{id:"prerequisites"},"Prerequisites"),Object(r.b)("p",null,"This flow requires the following node to be installed on your Node-RED:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/windkh/node-red-contrib-telegrambot"}),"node-red-contrib-telegrambot"))),Object(r.b)("h2",{id:"configuration--setup"},"Configuration & Setup"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"Import the Node-RED Flow"),Object(r.b)("li",{parentName:"ol"},'In the "IPN Handler" section of the flow double-click the initial node and specify URL for receiving POST notifications from BTCPay Server'),Object(r.b)("li",{parentName:"ol"},"Now add the notification URL to Node-RED flows and/or other servers creating invoices for you. Calls to BTCPay's Create Invoice API should have the ",Object(r.b)("inlineCode",{parentName:"li"},"notificationUrl")," property with the URL you specified in the previous step"),Object(r.b)("li",{parentName:"ol"},'Open the "Configuration nodes" panel in Node-RED (via tabs on the right panel or ',Object(r.b)("inlineCode",{parentName:"li"},"ctrl-g c")," shortcut) and configure the config-nodes:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"btcpay-api-config")," - create a store on your BTCPay Server and pair the node with it (",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://redbtc.org/docs/configuration/"}),"read more"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"telegram bot")," - ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://core.telegram.org/bots#6-botfather"}),"create a Telegram bot")," and copy/paste the token into the config-node"))),Object(r.b)("li",{parentName:"ol"},"Push ",Object(r.b)("inlineCode",{parentName:"li"},"Deploy")),Object(r.b)("li",{parentName:"ol"},"Open chat with your Bot and send ",Object(r.b)("inlineCode",{parentName:"li"},"/tellmyid")," command"),Object(r.b)("li",{parentName:"ol"},"Copy your id"),Object(r.b)("li",{parentName:"ol"},'Double-click the "\ud83d\udd28 TG data" node and paste your id into ',Object(r.b)("inlineCode",{parentName:"li"},"msg.payload.chatId")," property"),Object(r.b)("li",{parentName:"ol"},"Push ",Object(r.b)("inlineCode",{parentName:"li"},"Deploy")),Object(r.b)("li",{parentName:"ol"},'Done! Now the bot will send you notifications about paid invoices. You might edit the notification template in the "msgText = Invoice Paid" node.')),Object(r.b)("h2",{id:"node-red-flow"},"Node-RED Flow"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),'[\n    {\n        "id": "3672a5c4.72a55a",\n        "type": "template",\n        "z": "a6bcf03.19cf21",\n        "name": "msgText = Invoice Paid",\n        "field": "msgText",\n        "fieldType": "msg",\n        "format": "handlebars",\n        "syntax": "mustache",\n        "template": "\u26a1 Invoice has been paid \u26a1\\n\\nID: <b>{{payload.id}}</b>\\nPrice: <b>{{payload.price}}</b>\\nCurrency: <b>{{payload.currency}}</b>",\n        "output": "str",\n        "x": 610,\n        "y": 280,\n        "wires": [\n            [\n                "3fbbd85a.275e18"\n            ]\n        ]\n    },\n    {\n        "id": "3fa0ab35.9e56e4",\n        "type": "switch",\n        "z": "a6bcf03.19cf21",\n        "name": "check status",\n        "property": "payload.status",\n        "propertyType": "msg",\n        "rules": [\n            {\n                "t": "eq",\n                "v": "confirmed",\n                "vt": "str"\n            },\n            {\n                "t": "eq",\n                "v": "complete",\n                "vt": "str"\n            }\n        ],\n        "checkall": "false",\n        "repair": false,\n        "outputs": 2,\n        "x": 330,\n        "y": 280,\n        "wires": [\n            [\n                "3672a5c4.72a55a"\n            ],\n            [\n                "3672a5c4.72a55a"\n            ]\n        ]\n    },\n    {\n        "id": "6f9ec567.3cb2bc",\n        "type": "comment",\n        "z": "a6bcf03.19cf21",\n        "name": "IPN Handler",\n        "info": "",\n        "x": 150,\n        "y": 200,\n        "wires": []\n    },\n    {\n        "id": "7c969859.d52578",\n        "type": "telegram sender",\n        "z": "a6bcf03.19cf21",\n        "name": "",\n        "bot": "ac4e405.e7abcc",\n        "x": 1070,\n        "y": 420,\n        "wires": [\n            []\n        ]\n    },\n    {\n        "id": "3fbbd85a.275e18",\n        "type": "change",\n        "z": "a6bcf03.19cf21",\n        "name": "\ud83d\udd28 TG data",\n        "rules": [\n            {\n                "t": "delete",\n                "p": "payload",\n                "pt": "msg"\n            },\n            {\n                "t": "set",\n                "p": "payload.chatId",\n                "pt": "msg",\n                "to": "",\n                "tot": "num"\n            },\n            {\n                "t": "set",\n                "p": "payload.type",\n                "pt": "msg",\n                "to": "message",\n                "tot": "str"\n            },\n            {\n                "t": "set",\n                "p": "payload.options.parse_mode",\n                "pt": "msg",\n                "to": "HTML",\n                "tot": "str"\n            },\n            {\n                "t": "set",\n                "p": "payload.content",\n                "pt": "msg",\n                "to": "msgText",\n                "tot": "msg"\n            }\n        ],\n        "action": "",\n        "property": "",\n        "from": "",\n        "to": "",\n        "reg": false,\n        "x": 850,\n        "y": 280,\n        "wires": [\n            [\n                "7c969859.d52578"\n            ]\n        ]\n    },\n    {\n        "id": "5e246e3a.b3fad",\n        "type": "telegram command",\n        "z": "a6bcf03.19cf21",\n        "name": "",\n        "command": "/tellmyid",\n        "bot": "ac4e405.e7abcc",\n        "strict": false,\n        "hasresponse": false,\n        "x": 320,\n        "y": 580,\n        "wires": [\n            [\n                "173ee6ee.2b81b9"\n            ],\n            []\n        ]\n    },\n    {\n        "id": "173ee6ee.2b81b9",\n        "type": "template",\n        "z": "a6bcf03.19cf21",\n        "name": "content = Your Id is ...",\n        "field": "payload.content",\n        "fieldType": "msg",\n        "format": "handlebars",\n        "syntax": "mustache",\n        "template": "Your id: <b>{{originalMessage.from.id}}</b>\\n",\n        "output": "str",\n        "x": 540,\n        "y": 580,\n        "wires": [\n            [\n                "b808886.28c9278"\n            ]\n        ]\n    },\n    {\n        "id": "b808886.28c9278",\n        "type": "change",\n        "z": "a6bcf03.19cf21",\n        "name": "set HTML parse mode",\n        "rules": [\n            {\n                "t": "set",\n                "p": "payload.options.parse_mode",\n                "pt": "msg",\n                "to": "HTML",\n                "tot": "str"\n            }\n        ],\n        "action": "",\n        "property": "",\n        "from": "",\n        "to": "",\n        "reg": false,\n        "x": 820,\n        "y": 580,\n        "wires": [\n            [\n                "7c969859.d52578"\n            ]\n        ]\n    },\n    {\n        "id": "7ca838c0.b009a8",\n        "type": "comment",\n        "z": "a6bcf03.19cf21",\n        "name": "Helper to get Chat Id",\n        "info": "",\n        "x": 350,\n        "y": 500,\n        "wires": []\n    },\n    {\n        "id": "489d1a85.86dc34",\n        "type": "btcpay-ipn",\n        "z": "a6bcf03.19cf21",\n        "client": "9711e4a7.bae348",\n        "path": "/btcpay-ipn",\n        "name": "",\n        "x": 140,\n        "y": 280,\n        "wires": [\n            [\n                "3fa0ab35.9e56e4"\n            ]\n        ]\n    },\n    {\n        "id": "ac4e405.e7abcc",\n        "type": "telegram bot",\n        "z": "",\n        "botname": "Gatekeeper bot",\n        "usernames": "",\n        "chatids": "",\n        "baseapiurl": "",\n        "updatemode": "polling",\n        "pollinterval": "300",\n        "usesocks": false,\n        "sockshost": "",\n        "socksport": "6667",\n        "socksusername": "anonymous",\n        "sockspassword": "",\n        "bothost": "",\n        "localbotport": "8443",\n        "publicbotport": "8443",\n        "privatekey": "",\n        "certificate": "",\n        "useselfsignedcertificate": false,\n        "sslterminated": false,\n        "verboselogging": false\n    },\n    {\n        "id": "9711e4a7.bae348",\n        "type": "btcpay-api-config",\n        "z": "",\n        "name": ""\n    }\n]\n')))}p.isMDXComponent=!0},78:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return m}));var a=t(0),o=t.n(a);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=o.a.createContext({}),p=function(e){var n=o.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},b=function(e){var n=p(e.components);return o.a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},f=o.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),b=p(t),f=a,m=b["".concat(i,".").concat(f)]||b[f]||d[f]||r;return t?o.a.createElement(m,c(c({ref:n},s),{},{components:t})):o.a.createElement(m,c({ref:n},s))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=f;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var s=2;s<r;s++)i[s]=t[s];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,t)}f.displayName="MDXCreateElement"}}]);